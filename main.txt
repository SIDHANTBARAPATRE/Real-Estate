import cv2
import os
import pickle
import face_recognition
import numpy as np
import cvzone
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
from firebase_admin import storage
from datetime import datetime

cred = credentials.Certificate("serviceKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL':"https://attendancesystem-a5533-default-rtdb.firebaseio.com/",
    'storageBucket':"attendancesystem-a5533.appspot.com"
})

# Open the camera (index 0)
cap = cv2.VideoCapture(0)

# Set the frame width and height
cap.set(3, 640)
cap.set(4, 480)

imgBackground = cv2.imread('Resources/background.png')

# Check if the background image is loaded properly
if imgBackground is None:
    print("Error: Background image not loaded. Check the file path.")
    exit()  # Exit the program if the image can't be loaded

# Importing the mode images into a list
folderModePath = 'Resources/Modes'
modePathList = os.listdir(folderModePath)
imgModeList = []
for path in modePathList:
    imgModeList.append(cv2.imread(os.path.join(folderModePath, path)))

# Load the encoding file
print("Loading encode file")
file = open('EncodeFile.p', 'rb')
encodeListKnownWithIDS = pickle.load(file)
file.close()
encodeListKnown, studentIds = encodeListKnownWithIDS
print("Loaded encode file")

modeType = 0
counter = 0
id = -1

while True:
    success, img = cap.read()

    imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
    imgS = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    faceCurFrame = face_recognition.face_locations(imgS)
    encodeCurFrame = face_recognition.face_encodings(imgS, faceCurFrame)

    # Resize the imgModeList[modeType] to fit into the target area in imgBackground
    imgModeResized = cv2.resize(imgModeList[modeType], (414, 633))

    # Place the camera feed and mode images into the background
    imgBackground[162:162+480, 55:55+640] = img
    imgBackground[44:44+633, 888:888+414] = imgModeResized

    if faceCurFrame:

        for encodeFace, faceLoc in zip(encodeCurFrame, faceCurFrame):
            matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
            faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)

            matchIndex = np.argmin(faceDis)

            if matches[matchIndex]:
                y1, x2, y2, x1 = faceLoc
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                bbox = 55 + x1, 162 + y1, x2 - x1, y2 - y1
                imgBackground = cvzone.cornerRect(imgBackground, bbox, rt=0)
                id = studentIds[matchIndex]

                if counter == 0:
                    counter = 1
                    modeType = 1

            if counter != 0:

                if counter == 1:
                    # Get Data
                    studentInfo = db.reference(f'Students/{id}').get()
                    print(studentInfo)

                    # Update data
                    datetimeObject = datetime.strptime(studentInfo['last_attendance_time'],
                                                        "%Y-%m-%d %H:%M:%S")

                    secondsElapsed = (datetime.now() - datetimeObject).total_seconds()
                    print(secondsElapsed)
                    if secondsElapsed > 30:
                        ref = db.reference(f'Students/{id}')
                        studentInfo['Total_attendance'] = int(studentInfo['Total_attendance'])
                        studentInfo['Total_attendance'] += 1
                        ref.child('Total_attendance').set(studentInfo['Total_attendance'])
                        ref.child('last_attendance_time').set(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    else:
                        modeType = 3
                        counter = 0
                        imgBackground[44:44+633, 888:888+414] = imgModeList[modeType]

                if modeType != 3:

                    if 10 < counter < 20:
                        modeType = 2
                    imgBackground[44:44+633, 888:888+414] = imgModeList[modeType]

                    if counter <= 10:
                        cv2.putText(imgBackground, str(studentInfo['Total_attendance']), (941, 125),
                                    cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 1)
                        cv2.putText(imgBackground, str(studentInfo['Major']), (1106, 550),
                                    cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 1)
                        cv2.putText(imgBackground, str(id), (1100, 493),
                                    cv2.FONT_HERSHEY_COMPLEX, 0.45, (255, 255, 255), 1)
                        cv2.putText(imgBackground, str(studentInfo['Grade']), (990, 625),
                                    cv2.FONT_HERSHEY_COMPLEX, 0.6, (100, 100, 100), 1)
                        cv2.putText(imgBackground, str(studentInfo['year']), (1095, 625),
                                    cv2.FONT_HERSHEY_COMPLEX, 0.6, (100, 100, 100), 1)
                        cv2.putText(imgBackground, str(studentInfo['Starting_year']), (1185, 625),
                                    cv2.FONT_HERSHEY_COMPLEX, 0.6, (100, 100, 100), 1)

                        (w, h), _ = cv2.getTextSize(studentInfo['Name'], cv2.FONT_HERSHEY_COMPLEX, 1, 1)
                        offset = (414 - w) // 2
                        cv2.putText(imgBackground, str(studentInfo['Name']), (1011, 445),
                                    cv2.FONT_HERSHEY_COMPLEX, 1, (50, 50, 50), 1)

                    counter += 1

                    if counter >= 20:
                        counter = 0
                        modeType = 0
                        studentInfo = []
                        imgBackground[44:44+633, 888:888+414] = imgModeList[modeType]

    else:
        modeType = 0
        counter = 0

    # Show the final image with webcam feed and mode
    cv2.imshow("Attendance System", imgBackground)
    cv2.waitKey(1)
